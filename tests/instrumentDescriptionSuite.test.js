// T-012
const puppeteer = require('puppeteer');
let url = 'https://127.0.0.1:5501/index.html'

describe('AR Web App', () => {
    let browser;
    let page;

    //Open browser and page first
    beforeAll(async () => {

        //Use default browser, Chrome
        //Specify if headless mode
        //Ignore HTTPS certificate and errors since useing self published certificate for AR
        browser = await puppeteer.launch({
        headless: false,
        args: ['--ignore-certificate-errors'],
        ignoreHTTPSErrors: true,  // This disables HTTPS certificate checking
        });

        //Open new page
        page = await browser.newPage();

        //Open the application url
        await page.goto(url);

        //Check if overlay is visible
        const isOverlayVisible = await page.evaluate(() => {
            const overlay = document.querySelector('#closeOverlay');
            if(!overlay) return false;

            const isVisible = overlay.getAttribute('visible') !== 'false';
            return isVisible;
        });
        expect(isOverlayVisible).toBe(true);

        //Click outside overlay to close it
        await page.mouse.move(30,30);
        await page.mouse.down();
        await page.mouse.up();

        //Select OrbitA
        await page.evaluate(() => {
            const hitbox = document.querySelector('#orbitA-wrapper .hitbox');
            if (hitbox) {
            hitbox.emit('click');
            }
        });

        //Get button element
        const instrumentButton = await page.$('#instrumentButton');
        
        //Ensure the button exists and is visible
        expect(instrumentButton).not.toBeNull();

        //Wait for the button to appear
        await page.evaluate(() => new Promise(resolve => 
            setTimeout(resolve, 500)
        ));
    
        //Click button and wiat for page navigation
        await Promise.all([
            page.waitForNavigation({waitUntil: 'domcontentloaded'}),
            await instrumentButton.click(),
        ]);

        //Wait for the video window to appear
        await page.evaluate(() => new Promise(resolve => 
            setTimeout(resolve, 500)
        ));

        //Check if window is visible
        const isWindowVisible = await page.evaluate(() => {
            const window = document.querySelector('#videoModal');
            if(!window) return false;

            const isVisible = window.getAttribute('visible') !== 'false';
            return isVisible;
        });
        expect(isWindowVisible).toBe(true);

        await page.evaluate(() => new Promise(resolve => 
            setTimeout(resolve, 500)
        ));

        await page.click('#videoModal .btn-close');
    },15000);

    afterAll(async () => {
        await browser.close();
    });

    describe("Instrument description test", () => {
        const instruments = [
            {
              id: 'magnetometer',
              name: 'Magnetometer',
              description: 'In Orbit A, the magnetometer is tasked with measuring the magnetic field around Psyche with high precision. This instrument records the strength and direction of the magnetic field in three dimensions, which is crucial for detecting subtle magnetic anomalies. These anomalies can provide clues about the asteroid’s past, such as whether it once hosted a molten metallic core or experienced significant impacts that altered its magnetic signature.'
            },
            {
              id: 'multispectral',
              name: 'Multispectral Imager',
              description: 'During Orbit B, the multispectral imager captures detailed images of Psyche’s surface in multiple wavelengths. This allows scientists to distinguish different minerals based on how they reflect light. Additionally,  the imager’s high resolution helps create precise 3D models of surface features such as craters, ridges, and metallic deposits.'
            },
            {
              id: 'xband-radio',
              name: 'X-band Radio',
              description: 'During Orbit C, the X-band radio system is utilized for gravity science investigations. It works by sending radio waves between the spacecraft and Earth. By precisely measuring the Doppler shifts in these radio signals, scientists can detect tiny changes in the spacecraft’s velocity caused by variations in Psyche’s gravitational pull. These measurements help map the mass distribution and internal structure of the asteroid.'
            },
            {
              id: 'gamma',
              name: 'Gamma Ray Spectrometer',
              description: 'In Orbit D—the closest orbit—the gamma-ray spectrometer focuses on elemental mapping by detecting gamma-rays generated by cosmic-ray interactions with Psyche’s surface. This instrument identifies and quantifies key elements, such as iron and nickel, by analyzing the energy signatures of the emitted gamma-rays. This detailed compositional data is critical for understanding whether Psyche is the remnant core of a disrupted planetesimal or a unique metal-rich body.'
            },
            {
              id: 'neutron',
              name: 'Neutron Spectrometer',
              description: 'In Orbit D, the neutron spectrometer measures the major elemental composition of Psyche by detecting neutrons that are emitted when cosmic rays interact with the asteroid’s surface. Equipped with multiple filters, this instrument can differentiate between neutrons of various energy levels, which correspond to different elements. When used alongside the multispectral imager, the spectrometer’s data helps build a comprehensive picture of Psyche’s mineral and elemental makeup.'
            }
          ];
        test.each(instruments)('Description specific to selected instrument is displayed', async ({id, name, description}) => {
            //Click the insturment link.
            await page.evaluate((insturmentName) => {
                const instrumentLink = document.querySelector(`a[data-instrument="${insturmentName}"]`);
                if (instrumentLink) {
                  instrumentLink.click();
                }
            }, id);

           await page.waitForSelector('#instrument-details');

            //Verify details box is visible
      	    const isDetailsBoxVisible = await page.evaluate(() => {
        	    const detailsBox = document.querySelector('#instrument-details');
                if(!detailsBox) return false;

        	    const style = window.getComputedStyle(detailsBox);
                return style.display !== 'none' && style.visibility !== 'hidden';
      	    });
      	    expect(isDetailsBoxVisible).toBe(true);

            //Check box title
            const titleText = await page.$eval('#instrument-details-title', el => el.textContent.trim());
            expect(titleText).toBe(name);

            //Get button element
            const seeMoreButton = await page.waitForSelector('#see-more-btn1');

            //Ensure the button exists and is visible
            expect(seeMoreButton).not.toBeNull();

            //Click the button
            await seeMoreButton.click();

            //Wait for the text box to expand 
            await page.evaluate(() => new Promise(resolve => 
                setTimeout(resolve, 500)
            ));

            //Check contents
            const descriptionText = await page.$eval('#instrumentdetails', el => el.textContent.trim());
            expect(descriptionText).toBe(description);
        }, 10000);
    });
});